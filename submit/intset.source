CREATE TYPE intset;

CREATE FUNCTION intset_in(cstring)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'complex_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION intset_out(intset)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


-- now, we can create the type. The internallength specifies the size of the
-- memory block required to hold the type (we need two 8-byte doubles).

CREATE TYPE intset (
   internallength = variable,
   input = intset_in,
   output = intset_out
);

create table mySets (id integer primary key, iset intSet);

insert into mySets values (1, '{1,2,3}');
insert into mySets values (2, '{1,3,1,3,1}');
insert into mySets values (3, '{3,4,5}');
insert into mySets values (4, '{4,5}');

select * from mySets;

CREATE FUNCTION intset_contain(intset, intset) RETURNS bool
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_union(intset, intset) RETURNS intset
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_size(intset) RETURNS int4
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION intset_inter(intset, intset) RETURNS intset
   AS '_OBJWD_/intset' LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @> (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_contain,
   commutator = @>,
   restrict = scalarltsel, join = scalarltjoinsel
);

CREATE OPERATOR || (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_union,
   commutator = ||
);

CREATE OPERATOR @ (
   rightarg = intset,
   procedure = intset_size
);

CREATE OPERATOR && (
   leftarg = intset,
   rightarg = intset,
   procedure = intset_inter,
   commutator = &&
);

select a.*, b.* from mySets a, mySets b
where (b.iset @> a.iset) and a.id != b.id;
update mySets set iset = iset || '{5,6,7,8}' where id = 4;
select * from mySets where id=4;
select a.*, b.* from mySets a, mySets b
where (b.iset @> a.iset) and a.id != b.id;
select id, iset, (@iset) as card from mySets order by id;
select a.iset, b.iset, a.iset && b.iset
from mySets a, mySets b where a.id < b.id;

DROP TABLE mySets;
DROP TYPE intset CASCADE;
